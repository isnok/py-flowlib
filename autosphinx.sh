#!/bin/bash
#
# autosphinx.sh - automatically generate the sphinx code documentation
#                 for a flowtool component
#

docname () {
    pyfile="$1"
    pyname="$(basename $pyfile)"
    module="${pyname%%.py}"

    if [[ "$pyfile" =~ flowtool ]]; then
        package="${pyfile/.*flowtool/flowtool}"
        package="${package%%.py}"
        package="${package%%/__init__}"
        package="${package/\//.}"
        echo "found: $package"
    else
        echo "ignore: $module ($pyfile)"
    fi
}


findmods () {
    find $1 -name "*.py" | while read pyfile; do
        docname "$pyfile"
    done
}

genrst () {
    stars=$(printf '*%.0s' $(seq 1 ${#1}))
    rst_content="Source Documentation: $1
**********************$stars

.. automodule:: $1
    :members:
    :undoc-members:
    :inherited-members:
    :show-inheritance:
"
    echo "$rst_content"
}


AUTODOC_INDEX="./source/docstrings/index.rst"
AUTODOC_DESTINATION=$(dirname $AUTODOC_INDEX)

gendocfiles () {
    searchdir="$1"
    docdir="$2"
    if [[ ! -d "$docdir" ]]; then
        mkdir -p "$docdir"
    fi
    findmods "$searchdir" | while read line; do
        if [[ "$line" =~ ^found: ]]; then
            found="${line##found: }"

            #docfilename="$found.rst"
            docfilename="${found/\./__}.rst"
            docfile="$docdir/$docfilename"

            genrst "$found" > "$docfile"
            echo "generated: $docfile"
        fi
    done
}

gentoc () {
    toclines=$(sed 's/^/    /' <<< "$1")
    #reflines=$(sed 's/^\(.*\)/* :ref:`\1`/' <<< "$1")
    toc_file="Autogenerated Source Documentation
==================================

Contents:

.. toctree::
    :maxdepth: 2

$toclines
"
    echo "$toc_file"
}

gendocs () {
    docdir="$2"
    generated=$(gendocfiles "$1" "$docdir" | sed 's#generated: .*/\([^/]*\).rst#\1#' | sort)
    echo "==> Regenerated $AUTODOC_DESTINATION"
    gentoc "$generated" > "$AUTODOC_INDEX"
    echo "==> Refreshed $AUTODOC_INDEX"
}

gendocs "${1:-..}" "$AUTODOC_DESTINATION"
