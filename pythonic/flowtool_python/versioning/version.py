""" This file will be copied as a static drop-in into your source tree.
    This is the version of this file, that resides in the git repository.

    Inspired by https://github.com/warner/python-versioneer, this file can
    also be a template, if you see markers like @MARKER@ in the dict below.
"""

template = '''"""
    This file was generated by flowtool-versioning.
"""

VERSION_INFO = dict(
    version='{version}',
    commit='{commit}',
)

def get_version():
    global VERSION_INFO
    return VERSION_INFO['version']
'''

exec(template)

def render_template():
    global VERSION_INFO
    return template.format(**VERSION_INFO)

version_config = dict(
    tag_prefix='flowtool-gitflow-',
)

import os
join = os.path.join
dirname = os.path.dirname
isdir = os.path.isdir

git_root = None
current = os.getcwd()
while not isdir(join(current, '.git')):
    old = current
    current = dirname(current)
    if old == current:
        break
else:
    git_root = current

print('versioning: git-root = %s' % git_root)

import subprocess
def get_stdout(*command):
    process = subprocess.Popen(
        command,
        stdout=subprocess.PIPE
    )
    stdout, stderr = process.communicate()
    return stdout.decode('utf-8')

def git_tags():
    return get_stdout('git', 'tag', '--list').split()

tags = git_tags()
prefix = version_config['tag_prefix']
#prefixed = [tag for tag in tags if tag.startswith(prefix)]
#print('--> %s' % prefixed)

from pep440 import parse_pep440
#parsed = [parse_pep440(tag[len(prefix):]) for tag in prefixed]
#print(parsed)

def get_commit(identifier):
    return get_stdout('git', 'rev-parse', identifier).strip()

def commit_distance(a, b):
    rng = '%s...%s' % (a, b)
    return int(get_stdout('git', 'rev-list', '--count', rng))

distances = {
    tag: commit_distance('HEAD', tag)
    for tag in tags if tag.startswith(prefix)
}

close_to_far = sorted(distances, key=distances.__getitem__)
#for tag in close_to_far:
    #print('%s --%s-> HEAD' % (tag, distances[tag]))

latest = close_to_far[0]
latest_version = latest[len(prefix):]
distance = distances[latest]
if distance:
    commit = get_commit(latest)[:8]
    latest_version += '+%s.git:%s' % (distance, commit)

if get_stdout('git', 'status', '--short', '--untracked-files=no'):
    latest_version += '.dirty'

VERSION_INFO.update(
    version=latest_version,
    commit=get_commit('HEAD'),
)

print(VERSION_INFO)

print(render_template())
